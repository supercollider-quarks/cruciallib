CLASS:: AbstractPlayerProxy
summary:: base class for players that act as proxies for another player
categories:: Libraries>crucial>Players>abstract
related:: Classes/PlayerSocket

DESCRIPTION:: Defers all responsiblities for playing to another object.
This is a superclass.

Its not really abstract since it is possible to play it, though its primary purpose is as a superclass.

code::
a = AbstractPlayerProxy.new;
a.source = Patch({ Saw.ar });

a.play;

a.stop;
::

see link::Classes/PlayerSocket::


CLASSMETHODS::


INSTANCEMETHODS::

METHOD:: source


returns::

METHOD:: socketStatus


returns::

METHOD:: asSynthDef


returns::

METHOD:: synthDefArgs


returns::

METHOD:: synthArg


returns::

METHOD:: rate


returns::

METHOD:: numChannels


returns::

METHOD:: loadDefFileToBundle


argument:: b


argument:: server


returns::

METHOD:: defName


returns::

METHOD:: spawnToBundle


argument:: bundle


returns::

METHOD:: isPlaying


returns::

METHOD:: didSpawn


returns::

METHOD:: instrArgFromControl


argument:: control


returns::

METHOD:: initForSynthDef


argument:: synthDef


argument:: argi


returns::

METHOD:: connectToPatchIn


argument:: patchIn


argument:: needsValueSetNow


returns::

METHOD:: didStop


returns::

METHOD:: children


returns::

METHOD:: prepareChildrenToBundle


argument:: bundle


returns::



